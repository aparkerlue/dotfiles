#!/bin/sh
# -*- mode: shell-script; coding: utf-8; -*-

print_help() {
    cat <<EOF
Usage: $(basename $0) [OPTION]... FILE/DIR...
Back up the files and directories given as arguments.

  -r REPO               repository to back up to (default: \$RESTIC_REPOSITORY)
  -m                    repository is a mount point (default: \$USER_RESTIC_REPO_IS_MOUNTPOINT)
  -p PASSWORD_FILE      password file (default: \$RESTIC_PASSWORD_FILE)
  -e EXCLUDE_FILE       file to read exclude patterns from (default:
                        \$USER_RESTIC_EXCLUDE_FILE)
  -s RCLONE_REMOTE_PATH rclone remote:path to sync repository to
                        (default: \$USER_RESTIC_RCLONE_SYNC_URI)
  -n                    dry run
  -v                    explain what is being done
  -h             display this help and exit

Environment variables:

  RESTIC_REPOSITORY     repository (currently: ${RESTIC_REPOSITORY:-<unset>})
  USER_RESTIC_REPO_IS_MOUNTPOINT
                        repository is a mountpoint (currently: ${USER_RESTIC_REPO_IS_MOUNTPOINT:-<unset>})
  RESTIC_PASSWORD_FILE  password file (currently: $(
    echo $RESTIC_PASSWORD_FILE |
    sed "s#$HOME#~#"
  ))
  USER_RESTIC_EXCLUDE_FILE
                        exclude file (currently: ${USER_RESTIC_EXCLUDE_FILE:-<unset>})
  USER_RESTIC_RCLONE_SYNC_URI
                        remote:path URI for rclone (currently: ${USER_RESTIC_RCLONE_SYNC_URI:-<unset>})
EOF
}

print_error() {
    cat <<EOF >&2
$(basename $0): $1
EOF
}

print_error_help_hint() {
    cat <<EOF >&2
Try '$(basename $0) -h' for more information.
EOF
}

# Set variables
if [ -n "$RESTIC_REPOSITORY" ]; then
    repo="$RESTIC_REPOSITORY"
fi
if [ -n "$USER_RESTIC_REPO_IS_MOUNTPOINT" ]; then
    opt_mountpoint="$USER_RESTIC_REPO_IS_MOUNTPOINT"
fi
if [ -n "$RESTIC_PASSWORD_FILE" ]; then
    password_file="$RESTIC_PASSWORD_FILE"
fi
if [ -n "$USER_RESTIC_EXCLUDE_FILE" ]; then
    exclude_file="$USER_RESTIC_EXCLUDE_FILE"
fi
if [ -n "$USER_RESTIC_RCLONE_SYNC_URI" ]; then
    rclone_remote_path="$USER_RESTIC_RCLONE_SYNC_URI"
fi

# Parse options
while getopts :r:mpes:nvh NAME; do
    case "$NAME" in
        r)
            repo="$OPTARG"
            ;;
        m)
            opt_mountpoint=1
            ;;
        p)
            password_file="$OPTARG"
            ;;
        e)
            exclude_file="$OPTARG"
            ;;
        s)
            rclone_remote_path="$OPTARG"
            ;;
        n)
            opt_dryrun=1
            ;;
        v)
            opt_verbose=1
            ;;
        h)
            print_help
            exit
            ;;
        :)
            print_error "option requires an argument -- '$OPTARG'"
            print_error_help_hint
            exit 1
            ;;
        "?")
            print_error "invalid option -- '$OPTARG'"
            print_error_help_hint
            exit 1
            ;;
        *)
            print_error "invalid option -- '$NAME'"
            print_error_help_hint
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# Preconditions
if [ -z "$repo" ]; then
    print_error "no repository specified"
    error_need_hint=1
    error_preconditions_unsatisfied=1
fi
if [ -n "$repo" ] && [ -n "$opt_mountpoint" ] && ! mountpoint -q "$repo"; then
    print_error "not a mount point: $repo"
    error_preconditions_unsatisfied=1
fi
if [ ! -r "$exclude_file" ]; then
    print_error "exclude file unreadable -- '$exclude_file'"
    error_preconditions_unsatisfied=1
fi
if [ ! -r "$password_file" ]; then
    print_error "password file unreadable -- '$password_file'"
    error_need_hint=1
    error_preconditions_unsatisfied=1
fi
if [ -n "$rclone_remote_path" ] && [ ! -d "$repo" ]; then
    print_error "rclone sync specified, but repo not an extant local directory"
    error_need_hint=1
    error_preconditions_unsatisfied=1
fi
if ! command -v restic >/dev/null; then
    print_error "command unavailable: restic"
    error_preconditions_unsatisfied=1
fi
if ! command -v rclone >/dev/null; then
    print_error "command unavailable: rclone"
    error_preconditions_unsatisfied=1
fi
if [ "$#" -le 0 ]; then
    print_error "no specified files or directories to back up"
    error_need_hint=1
    error_preconditions_unsatisfied=1
fi
if [ -n "$error_need_hint" ]; then
    print_error_help_hint
fi
if [ -n "$error_preconditions_unsatisfied" ]; then
    exit 1
fi

if [ -n "$opt_verbose" ]; then
    echo "restic repository: $repo"
    echo "restic repository is a mount point: ${opt_mountpoint:-<unset>}"
    echo "restic exclude file: $exclude_file"
    echo "restic password file: $password_file"
    if [ -n "$rclone_remote_path" ]; then
        echo "rclone destination: $rclone_remote_path"
    fi
    echo "Backing up files and directories:"
    for x in "$@"; do
        echo "- $(realpath $x)"
    done
    echo
fi

if [ -z "$opt_dryrun" ]; then
    restic backup \
           --repo="$repo" \
           --password-file="$password_file" \
           --exclude-caches \
           --exclude-file="$exclude_file" \
           ${opt_verbose:+'-v'} \
           "$@" \
           -- &&
        restic forget \
               --repo="$repo" \
               --password-file="$password_file" \
               --keep-hourly 48 \
               --keep-daily 30 \
               --keep-weekly 12 \
               --keep-monthly 24 \
               --keep-yearly 100 \
               --prune \
               ${opt_verbose:+'-v'} \
               --
    exit_code="$?"
    if [ "$exit_code" -ne 0 ]; then
        exit $exit_code
    fi
    echo
fi

if [ -n "$rclone_remote_path" ]; then
    if [ -n "$opt_verbose" ]; then
        echo "Syncing restic repo $repo to $rclone_remote_path..."
    fi
    if [ -z "$opt_dryrun" ]; then
        rclone copy \
               --exclude '/lost+found/' \
               ${opt_verbose:+'-v'} \
               "$repo" \
               "$rclone_remote_path" &&
            rclone sync \
                   --exclude '/lost+found/' \
                   ${opt_verbose:+'-v'} \
                   "$repo" \
                   "$rclone_remote_path"
    fi
    echo
fi
